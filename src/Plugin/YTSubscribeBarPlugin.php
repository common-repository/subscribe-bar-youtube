<?php
/**
 * The public-facing functionality of the plugin.
 *
 * @link       http://wpbeginner.com
 * @since      1.0.0
 *
 * @package    YouTubeSubscribeBar
 * @subpackage YouTubeSubscribeBar/Plugin
 */
namespace YouTubeSubscribeBar\Plugin;

use YouTubeSubscribeBar\Plugin\YTSubscribeBarAdmin;

class YTSubscribeBarPlugin {

	/**
	 * Holds the plugin name slug.
	 * @var string
	 */
	public $plugin_slug;

	/**
	 * Holds the plugin name.
	 * @var string
	 */
	public $plugin_name;

	/**
	 * Holds the plugin admin object
	 * @var object
	 */
	public $plugin_admin;

	/**
	 * Constructor
	 */
	function __construct( $name, $slug ) {
		$this->plugin_slug = $slug;
		$this->plugin_name = $name;

		// Setup initialization
		$this->amysb_init();

		// setup the plugin adminsitration (for admin screen and settings)
		$this->plugin_admin = new YTSubscribeBarAdmin( $this->plugin_name, $this->plugin_slug );
	}

	/**
	 * Register all the necessary actions and perform setup
	 */
	public function amysb_init() {
		add_action( 'after_setup_theme', [ $this, 'amysb_setup_theme' ] );

		// enqueue styles & scripts
		add_action( 'wp_enqueue_scripts', [ $this, 'amysb_styles' ] );

		// load text domain
		add_action( 'plugins_loaded', [ $this, 'amysb_load_textdomain' ] );
	}

	/**
	 * Add all the necessary filters
	 */
	function amysb_setup_theme() {
		// Filter the oEmbed process to run the amysb_subscribe_bar() function
		add_filter( 'embed_oembed_html', [ $this, 'amysb_subscribe_bar' ], 10, 4 );

		// Filter block rendering.
		add_filter( 'render_block', [ $this, 'render_block' ], 10, 2 );
	}

	/**
	 * Outputs the Subscribe bar below the embedded video
	 */
	function amysb_subscribe_bar( $html, $url, $attr, $post_ID ) {
		global $pagenow;

		// do not append the subscribe bar if url is not youtube
		preg_match( '/((?:www\.)?(?:youtube(?:-nocookie)?\.com\/(?:v\/|watch\?v=|embed\/)|youtu\.be\/)([a-zA-Z0-9?&=_-]*))/i', $url, $matches );
		if ( empty( $matches ) ) {
			return $html;
		}

		// do not show subscribe bar in post editor (admin screens)
		if ( 'index.php' !== $pagenow ) {
			return $html;
		}

		/**
		 * Filter 'ytsb_hide' to disable the subscribe bar from showing up
		 *
		 * @since 1.0.0
		 * @param boolean
		 */
		if ( apply_filters( 'ytsb_hide', false ) ) {
			return $html;
		}

		$subscribe_bar = $this->get_subscribe_bar();

		// build the return html
		$return_html = '<div class="' . $this->plugin_slug . '-container"><div>' . $html . '</div>' . $subscribe_bar . '</div>';

		return $return_html;
	}

	/**
	 * Modify the embed markup to account for the Block Editor.
	 *
	 * The default HTML created by amysb_subscribe_bar() is optimized
	 * for the classic editor. This modifies the HTML of the embed for
	 * embeds created within the Block Editor.
	 *
	 * @global string $pagenow The current WordPress screen.
	 *
	 * @param string $content The default HTML.
	 * @param array  $block   The current block's attributes.
	 * @return string Block Editor optimized HTML.
	 */
	function render_block( $content, $block ) {
		global $pagenow;

		if (
			'index.php' === $pagenow &&
			! empty( $block['attrs']['providerNameSlug'] ) &&
			'youtube' === $block['attrs']['providerNameSlug'] &&
			'core/embed' === $block['blockName']
		) {
			$content  = str_replace( $this->get_subscribe_bar(), '', $content );
			$content .= $this->get_subscribe_bar();
		}

		return $content;
	}

	/**
	 * Markup for the YouTube subscribe bar.
	 *
	 * @global string $pagenow The current WordPress screen.
	 *
	 * @return string HTML for subscribe bar.
	 */
	function get_subscribe_bar() {
		static $subscribe_bar = false;

		if ( false !== $subscribe_bar ) {
			return $subscribe_bar;
		}

		// get the settings for the YouTube subscribe bar
		$settings = $this->plugin_admin->amysb_get_settings();

		// do not show the subscribe bar if YouTube Channel is set to empty
		if ( empty( $settings['ytsb_channel_id'] ) ) {
			$subscribe_bar = '';
			return $subscribe_bar;
		}

		// build the subscribe to channel bar
		ob_start();
		include YT_SUB_BAR_PATH . 'views/view.php';
		$subscribe_bar = ob_get_clean();

		return $subscribe_bar;
	}

	/**
	 * Pull the asset dependencies and version from auto generated file.
	 *
	 * @return array Asset version and dependencies.
	 */
	public function asset_data() {
		static $asset_data = [];

		if ( ! empty( $asset_data ) ) {
			return $asset_data;
		}

		/*
		 * Data for JavaScript and CSS files.
		 *
		 * This pulls in the data generated by @wordpress/dependency-extraction-webpack-plugin.
		 *
		 * The version hash takes in to account both the JavaScript and CSS files that are generated
		 * so can safely be used for both.
		 */
		$asset_details_path = plugin_dir_path( YT_SUB_BAR_FILE ) . 'assets/build/frontend.asset.php';

		// Fallback during development.
		$asset_data = [
			'dependencies' => [],
			'version'      => microtime(),
		];
		// Production/after build.
		if ( file_exists( $asset_details_path ) ) {
			$asset_data = include $asset_details_path;
		}

		return $asset_data;
	}

	/**
	 * Register and enqueue all the necessary admin styles
	 */
	public function amysb_styles() {
		wp_enqueue_style(
			$this->plugin_slug . '-style',
			plugins_url( '/assets/build/frontend.css', YT_SUB_BAR_FILE ),
			[],
			$this->asset_data()['version']
		);
	}

	/**
	 * Load the text domain
	 */
	function amysb_load_textdomain() {
		load_plugin_textdomain( $this->plugin_slug, false, dirname( plugin_basename( YT_SUB_BAR_FILE ) ) . '/languages/' );
	}
}
